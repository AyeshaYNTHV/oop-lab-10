package application;
	
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.stage.Stage;

public class Main extends Application {

    private TableView<Contact> tableView = new TableView<>();
    private ObservableList<Contact> contacts = FXCollections.observableArrayList();

    private TextField nameField;
    private TextField phoneField;
    private TextField emailField;
    private Button addButton;
    private Button editButton;
    private Button deleteButton;

    private Contact selectedContact;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Address Book");

        // Creating form fields
        nameField = new TextField();
        nameField.setPromptText("Name");
        phoneField = new TextField();
        phoneField.setPromptText("Phone Number");
        emailField = new TextField();
        emailField.setPromptText("Email");

        // Adding form fields
        VBox formLayout = new VBox(10);
        formLayout.getChildren().addAll(
                new Label("Add/Edit Contact:"),
                nameField,
                phoneField,
                emailField
        );

        // Creating table columns
        TableColumn<Contact, String> nameColumn = new TableColumn<>("Name");
        nameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
        TableColumn<Contact, String> phoneColumn = new TableColumn<>("Phone Number");
        phoneColumn.setCellValueFactory(new PropertyValueFactory<>("phoneNumber"));
        TableColumn<Contact, String> emailColumn = new TableColumn<>("Email");
        emailColumn.setCellValueFactory(new PropertyValueFactory<>("email"));

        // Adding columns to table
        tableView.getColumns().addAll(nameColumn, phoneColumn, emailColumn);
        tableView.setItems(contacts);

        // Creating layout
        BorderPane layout = new BorderPane();
        layout.setLeft(formLayout);
        layout.setCenter(tableView);

        // Adding buttons
        addButton = new Button("Add Contact");
        addButton.setOnAction(e -> addContact());

        editButton = new Button("Edit Contact");
        editButton.setOnAction(e -> editContact());

        deleteButton = new Button("Delete Contact");
        deleteButton.setOnAction(e -> deleteContact());

        HBox buttonLayout = new HBox(10);
        buttonLayout.getChildren().addAll(addButton, editButton, deleteButton);
        formLayout.getChildren().add(buttonLayout);

        // Handling table selection
        tableView.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {
            if (newSelection != null) {
                selectedContact = newSelection;
                nameField.setText(selectedContact.getName());
                phoneField.setText(selectedContact.getPhoneNumber());
                emailField.setText(selectedContact.getEmail());
            }
        });

        // Styling
        Scene scene = new Scene(layout, 600, 400);
        scene.getStylesheets().add(getClass().getResource("styles.css").toExternalForm());

        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void addContact() {
        contacts.add(new Contact(nameField.getText(), phoneField.getText(), emailField.getText()));
        clearFields();
    }

    private void editContact() {
        if (selectedContact != null) {
            selectedContact.setName(nameField.getText());
            selectedContact.setPhoneNumber(phoneField.getText());
            selectedContact.setEmail(emailField.getText());
            tableView.refresh();
            clearFields();
        } else {
            showAlert("No contact selected", "Please select a contact to edit.");
        }
    }

    private void deleteContact() {
        if (selectedContact != null) {
            contacts.remove(selectedContact);
            clearFields();
        } else {
            showAlert("No contact selected", "Please select a contact to delete.");
        }
    }

    private void clearFields() {
        nameField.clear();
        phoneField.clear();
        emailField.clear();
        tableView.getSelectionModel().clearSelection();
        selectedContact = null;
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }
}

